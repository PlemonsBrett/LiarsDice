name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        build_type: [ Debug, Release ]
        exclude:
          # Skip Windows Debug builds to save time
          - os: windows-latest
            build_type: Debug

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      # Cache for faster builds
      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/vcpkg
            ./build/vcpkg_installed
            ${{ env.CONAN_USER_HOME }}
            ~/.cache/pip
            ~/Library/Caches/pip
          key: ${{ runner.os }}-${{ matrix.build_type }}-${{ hashFiles('**/CMakeLists.txt') }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.build_type }}-

      # Install system dependencies
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libboost-all-dev \
            python3-pip \
            lcov \
            ninja-build \
            ccache

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install \
            boost \
            python@3.11 \
            ninja \
            ccache \
            lcov

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install ninja ccache

      # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install robotframework==7.0 pexpect==4.9.0 psutil==5.9.8
          pip install gcovr

      # Setup compiler
      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.os == 'windows-latest' && 'msvc' || '' }}
          vcvarsall: ${{ matrix.os == 'windows-latest' && 'true' || 'false' }}
          cmake: true
          ninja: true
          ccache: true

      # Configure CMake
      - name: Configure CMake
        run: |
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DENABLE_TEST_COVERAGE=${{ matrix.build_type == 'Debug' && 'ON' || 'OFF' }} \
            -G Ninja
      
      # Build
      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }} -j 4
      
      # Run unit tests
      - name: Run unit tests
        working-directory: build
        run: |
          ctest -C ${{ matrix.build_type }} --output-on-failure --verbose

      # Run individual test executables for better output
      - name: Run individual tests
        working-directory: build/test
        shell: bash
        run: |
          for test in test_*; do
            if [[ -f "$test" && -x "$test" && "$test" != *.exe ]]; then
              echo "Running $test..."
              ./$test --log_level=test_suite --report_level=short
            elif [[ -f "$test.exe" ]]; then
              echo "Running $test.exe..."
              ./$test.exe --log_level=test_suite --report_level=short
            fi
          done

      # Run Robot Framework tests (skip on Windows for now)
      - name: Run Robot Framework tests
        if: runner.os != 'Windows'
        run: |
          robot --variable CLI_PATH:${{ github.workspace }}/build/standalone/liarsdice \
                --outputdir test/robot/results \
                --exclude skip \
                test/robot/liarsdice_tests.robot \
                test/robot/edge_cases.robot

      # Generate a coverage report
      - name: Generate coverage report (Ubuntu)
        if: runner.os == 'Linux' && matrix.build_type == 'Debug'
        run: |
          cd build
          # Generate coverage info
          lcov --directory . --capture --output-file coverage.info
          # Remove system headers and test code from coverage
          lcov --remove coverage.info '/usr/*' '*/test/*' '*/cmake-build-*/*' '*/CMakeFiles/*' -o coverage_filtered.info
          # Generate report
          genhtml coverage_filtered.info --output-directory coverage-report

      - name: Generate coverage report (macOS)
        if: runner.os == 'macOS' && matrix.build_type == 'Debug'
        run: |
          cd build
          # Use gcovr for macOS
          gcovr --root .. \
                --exclude '../test/*' \
                --exclude '../build/*' \
                --exclude '../standalone/*' \
                --xml coverage.xml \
                --html-details coverage-report/index.html

      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        if: matrix.build_type == 'Debug' && (runner.os == 'Linux' || runner.os == 'macOS')
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./build/coverage.info,./build/coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}
          fail_ci_if_error: false
          verbose: true

      # Upload test results
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            test/robot/results/
            build/coverage-report/
          retention-days: 7

      # Upload coverage report
      - name: Upload coverage report
        if: matrix.build_type == 'Debug' && (runner.os == 'Linux' || runner.os == 'macOS')
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.os }}
          path: build/coverage-report/
          retention-days: 7